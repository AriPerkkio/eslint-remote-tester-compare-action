/**
 * TODO:
 * - Include typings in eslint-remote-tester builds
 * - Use Config typings here
 * - Accept passing rules via PR comment
 */

import fs from 'fs';
import path from 'path';
import * as core from '@actions/core';
import { exec } from '@actions/exec';

const ESLINT_REMOTE_TESTER_BIN = './node_modules/.bin/eslint-remote-tester';
const INTERNAL_CONFIG = 'eslint-remote-tester-compare.config.js';

/**
 * Configuration values used internally. These are overwritten from user provided configuration.
 */
const DEFAULT_CONFIG = {
    CI: true,
    compare: true,
    updateComparisonReference: true,
    cache: false,
    resultParser: 'markdown',
};

const CONFIGURATION_TEMPLATE = (
    configuration: any,
    configurationPath: string
) =>
    ` // Generated by eslint-remote-tester-compare-action
const core = require('@actions/core');

module.exports = {
    ...${JSON.stringify(configuration, null, 4)},
    onComplete: async function onCompare(results, comparisonResults) {
        core.setOutput('comparisonResults', JSON.stringify(comparisonResults || {}));
        core.info('Comparison results set');

        // User provided onComplete is injected here if present
        ${
            configuration.onComplete
                ? `require(${configurationPath}).onComplete(results, comparisonResults);`
                : '// No onComplete detected'
        }
    }
};
`;

export default async function runTester(configLocation: string): Promise<void> {
    try {
        if (!fs.existsSync(ESLINT_REMOTE_TESTER_BIN)) {
            throw new Error('Missing eslint-remote-tester');
        }
        if (!fs.existsSync(path.resolve(configLocation))) {
            throw new Error(
                `Unable to find eslint-remote-tester with path ${configLocation}`
            );
        }

        const userProvidedConfig = require(path.resolve(configLocation));
        fs.writeFileSync(
            INTERNAL_CONFIG,
            CONFIGURATION_TEMPLATE(
                { ...userProvidedConfig, ...DEFAULT_CONFIG },
                configLocation
            )
        );

        await exec(`cat ./${INTERNAL_CONFIG}`);

        await exec(
            `${ESLINT_REMOTE_TESTER_BIN} --config ./${INTERNAL_CONFIG}`,
            [],
            { ignoreReturnCode: true }
        );
    } catch (error) {
        core.setFailed(error.message);
    }
}
